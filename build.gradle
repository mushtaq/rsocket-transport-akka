buildscript {
    apply from: file('versions.gradle')
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'net.researchgate:gradle-release:2.7.0'
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.7.3"
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
    }
}

apply plugin: 'scala'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'com.jfrog.bintray'

group = 'io.rsocket'
description = 'Akka RSocket transport implementations (TCP, Websocket)'

repositories {
    jcenter()
}

dependencies {
    zinc "com.typesafe.zinc:zinc:0.3.15"

    compile libraries.rsocket
    compile libraries.akkaHttp
    compile libraries.akkaStream

    testCompile libraries.rsocketTest
    testCompile libraries.akkaActorTestkit

    testRuntimeOnly libraries.junitJupiterEngine
}

apply from: 'publication.gradle'
apply from: 'artifactory.gradle'
apply from: 'bintray.gradle'

sourceCompatibility = 1.8
targetCompatibility = 1.8

if (!project.parent) {
    apply plugin: 'net.researchgate.release'
    final svs = ['2.12.6', '2.11.12', '2.13.0-M3']

    for (sv in svs) {
        String scalaVersionInDot = sv.replaceAll("_", ".")

        tasks.create(name: "build_$sv", type: GradleBuild) {
            buildFile = './build.gradle'
            tasks = ['build']
            startParameter.projectProperties = [scalaVersion: "${scalaVersionInDot}"]
        }

        tasks.create(name: "artifactoryPublish_${sv}", type: GradleBuild) {
            buildFile = './build.gradle'
            tasks = ['artifactoryPublish']
            startParameter.projectProperties = [scalaVersion: "${scalaVersionInDot}"]
        }

        tasks.create(name: "bintrayUpload_${sv}", type: GradleBuild) {
            buildFile = './build.gradle'
            tasks = ['bintrayUpload']
            startParameter.projectProperties = [scalaVersion: "${scalaVersionInDot}"]
        }


        configure(tasks.getByName("build_${sv}")) {
            group = 'Build'
        }

        configure(tasks.getByName("artifactoryPublish_${sv}")) {
            group = 'Publishing'
        }

        configure(tasks.getByName("bintrayUpload_${sv}")) {
            group = 'Publishing'
        }
    }

    tasks.create(name: "buildAll", dependsOn: svs.collect{"build_${it}"}) {}

    configure(tasks.getByName("buildAll")) {
        group = 'Build'
    }

    tasks.create(name: "artifactoryPublishAll", dependsOn: svs.collect{"artifactoryPublish_${it}"}) {}

    configure(tasks.getByName("artifactoryPublishAll")) {
        group = 'Publishing'
    }

    tasks.create(name: "bintrayUploadAll", dependsOn: svs.collect{"bintrayUpload_${it}"}) {}

    configure(tasks.getByName("bintrayUploadAll")) {
        group = 'Publishing'
    }

    project.task("releaseAll", description: 'Verify project, release and update version to next.', group: "Release", type: GradleBuild) {
        startParameter = project.getGradle().startParameter.newInstance()
        tasks = [
                'createScmAdapter', 'checkCommitNeeded', 'checkUpdateNeeded', 'unSnapshotVersion',
                'confirmReleaseVersion', 'checkSnapshotDependencies', 'buildAll',
                'preTagCommit', 'createReleaseTag', 'updateVersion', 'commitNewVersion'
        ]
    }

    project.createReleaseTag.dependsOn {
        project.uploadArchivesAll
    }
}

archivesBaseName = "${rootProject.name}_$baseScalaVersion"

artifacts {
    archives jar
    archives sourcesJar
    archives scaladocJar
}

ScalaCompileOptions.metaClass.daemonServer = true
ScalaCompileOptions.metaClass.fork = true
ScalaCompileOptions.metaClass.useAnt = false
ScalaCompileOptions.metaClass.useCompileDaemon = false

project.tasks.scaladoc.scalaDocOptions.additionalParameters = ["-no-link-warnings"]
project.tasks.compileScala.scalaCompileOptions.additionalParameters = ["-target:jvm-1.8"]
project.tasks.compileTestScala.scalaCompileOptions.additionalParameters = ["-target:jvm-1.8"]

release {
    git {
        requireBranch = ''
    }
}

test {
    useJUnitPlatform()

    maxParallelForks = 1
}
